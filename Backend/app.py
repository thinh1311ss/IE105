from flask import Flask, request, jsonify
from flask_cors import CORS
import numpy as np
import cv2
import tensorflow as tf
import os
from dotenv import load_dotenv
from datetime import datetime
from email.mime.image import MIMEImage
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import base64
import logging
from gmail_service import get_gmail_service

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "http://localhost:3000"}})

# C·∫•u h√¨nh t·ª´ file .env
app.config['UPLOAD_FOLDER'] = os.getenv('UPLOAD_FOLDER', 'uploads')
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')
PORT = int(os.getenv('PORT', 1311))
EMAIL_ADDRESS = os.getenv('EMAIL_ADDRESS')

# Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
if not EMAIL_ADDRESS:
    logger.error("EMAIL_ADDRESS kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong .env")
    raise ValueError("C·∫ßn c·∫•u h√¨nh EMAIL_ADDRESS trong .env")

# T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a t·ªìn t·∫°i
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Load TFLite model
try:
    interpreter = tf.lite.Interpreter(model_path=r"C:\UIT\IE\IE105\DoAn\MODEL\fire_detection2.tflite")
    interpreter.allocate_tensors()
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    height, width = input_details[0]['shape'][1:3]
    logger.info(f"ƒê√£ t·∫£i m√¥ h√¨nh TFLite v·ªõi k√≠ch th∆∞·ªõc ƒë·∫ßu v√†o: {height}x{width}")
except Exception as e:
    logger.error(f"L·ªói khi t·∫£i m√¥ h√¨nh TFLite: {e}")
    raise

def send_fire_alert(email, score, image_path=None):
    try:
        service = get_gmail_service()
        
        message = MIMEMultipart()
        message['To'] = email
        message['From'] = EMAIL_ADDRESS
        message['Subject'] = 'C·∫¢NH B√ÅO: Ph√°t hi·ªán ch√°y!'

        text_content = f"""
        C·∫¢NH B√ÅO CH√ÅY
        ƒê·ªô tin c·∫≠y: {score*100:.2f}%
        Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        message.attach(MIMEText(text_content, 'plain'))

        html_content = f"""
        <h2 style="color: red;">üî• C·∫¢NH B√ÅO CH√ÅY üî•</h2>
        <p>ƒê·ªô tin c·∫≠y: <strong>{score*100:.2f}%</strong></p>
        <p>Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        """
        message.attach(MIMEText(html_content, 'html'))

        if image_path and os.path.exists(image_path):
            with open(image_path, 'rb') as img_file:
                img_data = img_file.read()
            mime_image = MIMEImage(img_data, name='fire_alert.jpg')
            mime_image.add_header('Content-Disposition', 'attachment', filename='fire_alert.jpg')
            message.attach(mime_image)
            logger.info(f"ƒê√£ ƒë√≠nh k√®m ·∫£nh: {image_path}")

        encoded_message = base64.urlsafe_b64encode(message.as_bytes()).decode()
        send_message = {'raw': encoded_message}

        result = service.users().messages().send(
            userId="me",
            body=send_message
        ).execute()
        
        logger.info(f"ƒê√£ g·ª≠i email ƒë·∫øn {email}, Message ID: {result['id']}")
        return True
    
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i email: {e}")
        return False

def predict_fire(image):
    try:
        logger.debug(f"H√¨nh ·∫£nh g·ªëc: {image.shape}")
        if image.size == 0:
            logger.warning("·∫¢nh ƒë·∫ßu v√†o r·ªóng, tr·∫£ v·ªÅ k·∫øt qu·∫£ m·∫∑c ƒë·ªãnh")
            return False, 0.0
        
        # Resize ·∫£nh theo k√≠ch th∆∞·ªõc y√™u c·∫ßu c·ªßa m√¥ h√¨nh
        image = cv2.resize(image, (width, height))
        
        # Chu·∫©n h√≥a v·ªÅ [0, 1] nh∆∞ trong hu·∫•n luy·ªán
        image_float = image.astype(np.float32) / 255.0
        
        image = np.expand_dims(image_float, axis=0)
        logger.debug(f"H√¨nh ·∫£nh sau x·ª≠ l√Ω: {image.shape}")
        
        # ƒê∆∞a ·∫£nh v√†o m√¥ h√¨nh
        interpreter.set_tensor(input_details[0]['index'], image)
        interpreter.invoke()
        output = interpreter.get_tensor(output_details[0]['index'])
        raw_score = float(output[0][0])
        
        # Debug gi√° tr·ªã ƒë·∫ßu ra th√¥
        logger.info(f"ƒêi·ªÉm d·ª± ƒëo√°n th√¥ (raw_score): {raw_score}")
        
        # √Åp d·ª•ng sigmoid n·∫øu ƒë·∫ßu ra kh√¥ng chu·∫©n h√≥a
        if raw_score < 0 or raw_score > 1:
            score = 1 / (1 + np.exp(-raw_score))
            logger.info(f"Score sau sigmoid: {score}")
        else:
            score = raw_score
        
        # ƒêi·ªÅu ch·ªânh ng∆∞·ª°ng ph√¢n lo·∫°i (th·ª≠ nghi·ªám v·ªõi ng∆∞·ª°ng th·∫•p h∆°n)
        threshold = 0.5  # Gi·∫£m ng∆∞·ª°ng xu·ªëng 0.1
        is_fire = score > threshold
        logger.info(f"Ng∆∞·ª°ng ph√¢n lo·∫°i: {threshold}, K·∫øt qu·∫£: {'fire' if is_fire else 'no_fire'}, Score: {score}")
        
        return is_fire, score
    except Exception as e:
        logger.error(f"L·ªói trong predict_fire: {e}")
        return False, 0.0

@app.route('/api/predict', methods=['POST'])
def predict():
    logger.info("Nh·∫≠n y√™u c·∫ßu t·∫°i /api/predict")
    logger.info(f"Request files: {request.files}")
    logger.info(f"Request form: {request.form}")

    if 'file' not in request.files:
        logger.error("Kh√¥ng c√≥ t·ªáp trong y√™u c·∫ßu")
        return jsonify({"error": "Kh√¥ng c√≥ t·ªáp trong y√™u c·∫ßu"}), 400

    user_email = request.form.get('email')
    if not user_email:
        logger.error("Kh√¥ng c√≥ email trong y√™u c·∫ßu")
        return jsonify({"error": "Vui l√≤ng nh·∫≠p email"}), 400
    
    logger.info(f"Email nh·∫≠n t·ª´ frontend: {user_email}")
    logger.info(f"Email g·ª≠i t·ª´: {EMAIL_ADDRESS}")
    
    file = request.files['file']
    filename = file.filename.lower()
    ext = os.path.splitext(filename)[1]

    try:
        if ext in ['.jpg', '.jpeg', '.png']:
            npimg = np.frombuffer(file.read(), np.uint8)
            img = cv2.imdecode(npimg, cv2.IMREAD_COLOR)
            if img is None or img.size == 0:
                logger.error("Kh√¥ng th·ªÉ gi·∫£i m√£ ·∫£nh")
                return jsonify({"error": "Kh√¥ng th·ªÉ gi·∫£i m√£ ·∫£nh"}), 400
            
            # Debug: L∆∞u ·∫£nh ƒë·ªÉ ki·ªÉm tra
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            img_path = os.path.join(app.config['UPLOAD_FOLDER'], f"fire_check_{timestamp}{ext}")
            cv2.imwrite(img_path, img)
            logger.info(f"ƒê√£ l∆∞u ·∫£nh t·∫°i: {img_path}")
            
            # D·ª± ƒëo√°n
            is_fire, score = predict_fire(img)
        
        else:
            logger.error("Ch·ªâ ch·∫•p nh·∫≠n ·∫£nh (jpg, jpeg, png)")
            return jsonify({"error": "Ch·ªâ ch·∫•p nh·∫≠n ·∫£nh"}), 400

        result = "fire" if is_fire else "no_fire"
        logger.info(f"K·∫øt qu·∫£ d·ª± ƒëo√°n: {result}, ƒëi·ªÉm: {score}")
        
        if is_fire:
            logger.info(f"G·ª≠i email t·ª´ {EMAIL_ADDRESS} ƒë·∫øn {user_email}")
            send_fire_alert(user_email, score, img_path)
        
        return jsonify({
            "result": result,
            "score": score,
            "message": "C·∫£nh b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email" if is_fire else "Kh√¥ng ph√°t hi·ªán ch√°y",
            "image_path": img_path if ext in ['.jpg', '.jpeg', '.png'] else None
        })
    
    except Exception as e:
        logger.error(f"L·ªói trong route /api/predict: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=PORT, debug=os.getenv('FLASK_ENV') == 'development')